<?php

namespace Application\UseCases;

use App\Application\UseCases\Account\CreateAccountCase;
use App\Domain\DTO\AccountDTO;
use App\Domain\Entity\Account;
use App\Infrastructure\Persistence\Account\PdoAccountRepository;
use DateTimeImmutable;
use GuzzleHttp\Exception\GuzzleException;
use PHPUnit\Framework\MockObject\Exception;
use Psr\Log\LoggerInterface;
use Tests\TestCase;
use DI\Container;

class CreateAccountTest extends TestCase
{
    public static function accountProvider(): array
    {
        return [
            [
                1, // id
                3, // userId
                "gustavo@email.com", // userEmail
                "Test Case", // name
                "Test Case Development", // description
                true, // status
                new \DateTimeImmutable('2025-01-01 00:00:00'), // createdAt
                new \DateTimeImmutable('2025-01-02 00:00:00')  // updatedAt
            ]
        ];
    }

    public function setUp(): void
    {

    }

    /**
     * @dataProvider accountProvider
     * @param int $id
     * @param int $userId
     * @param string $userEmail
     * @param string $name
     * @param string $description
     * @param bool $status
     * @param DateTimeImmutable $createdAt
     * @param DateTimeImmutable $updatedAt
     * @throws Exception
     * @throws \Exception
     * @throws GuzzleException
     */
    public function testCrerateAccountWithValidation(int $id, int $userId, string $userEmail, string $name, string $description, bool $status, \DateTimeImmutable $createdAt, \DateTimeImmutable $updatedAt)
    {
        $account = new Account($id, $userId, $userEmail, $name, $description, $status, $createdAt, $updatedAt);
        $app = $this->getAppInstance();
        /** @var Container $container */
        $container = $app->getContainer();
        $accountPdoRepository = $this->createMock(PdoAccountRepository::class);
        $accountPdoRepository->expects($this->once())->method('save')->willReturn($account);

        $createAccountCase = new CreateAccountCase($container->get(LoggerInterface::class), $accountPdoRepository);

        $accountData = [
            'userId' => $userId,
            'userEmail' => $userEmail,
            'name' => $name,
            'description' => $description,
        ];


        $result = $createAccountCase->execute($accountData, false);
        $this->assertInstanceOf(AccountDTO::class, $result);
        $this->assertEquals($result->toArray()['id'], $id);
        $this->assertEquals($result->toArray()['userId'], $userId);
        $this->assertEquals($result->toArray()['userEmail'], $userEmail);
        $this->assertEquals($result->toArray()['name'], $name);
        $this->assertEquals($result->toArray()['description'], $description);
    }

    /**
     * @dataProvider accountProvider
     * @param int $id
     * @param int $userId
     * @param string $userEmail
     * @param string $name
     * @param string $description
     * @param bool $status
     * @param DateTimeImmutable $createdAt
     * @param DateTimeImmutable $updatedAt
     * @throws \Exception
     * @throws Exception
     */
    public function testCreateAccountWithNoValidation(int $id, int $userId, string $userEmail, string $name, string $description, bool $status, \DateTimeImmutable $createdAt, \DateTimeImmutable $updatedAt)
    {
        $account = new Account($id, $userId, $userEmail, $name, $description, $status, $createdAt, $updatedAt);
        $app = $this->getAppInstance();
        /** @var Container $container */
        $container = $app->getContainer();
        $accountPdoRepository = $this->createMock(PdoAccountRepository::class);
        $accountPdoRepository->expects($this->once())->method('save')->willReturn($account);

        $createAccountCase = new CreateAccountCase($container->get(LoggerInterface::class), $accountPdoRepository);

        $accountData = [
            'userId' => $userId,
            'userEmail' => $userEmail,
            'name' => $name,
            'description' => $description,
        ];


        $result = $createAccountCase->execute($accountData, true);
        $this->assertInstanceOf(AccountDTO::class, $result);
        $this->assertEquals($result->toArray()['id'], $id);
        $this->assertEquals($result->toArray()['userId'], $userId);
        $this->assertEquals($result->toArray()['userEmail'], $userEmail);
        $this->assertEquals($result->toArray()['name'], $name);
        $this->assertEquals($result->toArray()['description'], $description);
    }

}